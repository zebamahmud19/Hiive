create or replace view ANALYTICS_DEV.PAYMENT_GATEWAY.VW_TNX(
	ID,
	BID_ID,
	STATE,
	TRANSFER_METHOD,
	COMPANY_ID,
	NUM_SHARES,
	PRICE_PER_SHARE,
	GROSS_PROCEEDS,
	INSERTED_AT,
	TNX_TRANSITION_ID,
	NEW_STATE,
	OPEN_DATE,
	TRANSITION_OPEN_DIFF,
	TRANSITIONED_AT,
	TRANSITION_DATE,
	CLOSED_AT_TIMESTAMP,
	CLOSED_AT_DATE,
	TERMINATION_REASON,
	TRANSACTION_TYPE
) as

WITH TRANSACTION AS 
(
SELECT 
    ID,
    BID_ID,
    STATE,
    TRANSFER_METHOD,
    COMPANY_ID,
    NUM_SHARES,
    PRICE_PER_SHARE,
    GROSS_PROCEEDS,
    INSERTED_AT
FROM ANALYTICS_DEV.PAYMENT_GATEWAY.TMP_TNX
WHERE _fivetran_deleted = FALSE
),

TRANSATION_TRANSITION AS
(
SELECT 
    ID AS TNX_TRANSITION_ID,
    TRANSACTION_ID,
    NEW_STATE,
    TRANSITIONED_AT
FROM ANALYTICS_DEV.PAYMENT_GATEWAY.TMP_TNX_TRANSITION
WHERE _fivetran_deleted = FALSE
),

TRANSACTION_TERMINATION AS
(
SELECT *
FROM ANALYTICS_DEV.PAYMENT_GATEWAY.TMP_TNX_TERMINATION
),

TMP AS
(
SELECT 
    TRANSACTION.*,
    TNX_TRANSITION_ID,
    NEW_STATE,
    CAST(INSERTED_AT AS DATE) AS OPEN_DATE,
    DATEDIFF(HOUR, INSERTED_AT, TRANSITIONED_AT)/24 AS TRANSITION_OPEN_DIFF,
    TRANSITIONED_AT,
    CAST(TRANSITIONED_AT AS DATE) AS TRANSITION_DATE,
    CASE WHEN UPPER(NEW_STATE) IN ('CLOSED_PAID') THEN TRANSITIONED_AT ELSE NULL END AS CLOSED_AT_TIMESTAMP,
    CAST(CASE WHEN UPPER(NEW_STATE) IN ('CLOSED_PAID') THEN TRANSITIONED_AT ELSE NULL END AS DATE) AS CLOSED_AT_DATE,   
    TERMINATION_REASON,
    CASE WHEN UPPER(NEW_STATE) IN ('CANCELLED','EXPIRED','APPROVAL_DECLINED','CLOSED_PAID') THEN 'INVALID' ELSE 'VALID' END AS TRANSACTION_TYPE
FROM TRANSACTION
LEFT JOIN TRANSATION_TRANSITION 
ON TRANSACTION.ID = TRANSATION_TRANSITION.TRANSACTION_ID
LEFT JOIN TRANSACTION_TERMINATION
ON TRANSACTION.ID = TRANSACTION_TERMINATION.TRANSACTION_ID
)



SELECT * 
FROM TMP
ORDER BY ID;
